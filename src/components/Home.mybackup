<template>
<div style="background-color:#99a9bf">

  <el-row>
    <el-col :span="24"><div class="grid-content bg-purple-dark">
      <t1>仿真平台界面</t1>
    </div></el-col>
  </el-row>
  <el-row :gutter="20" background-color="#99a9bf">
    <el-col :span="16"><div class="grid-content bg-purple-dark">
      <el-table
        :data="tableData"
        style="width: 100%;margin: 10px;"
        height="500"
      >
        <el-table-column
          prop="jobid"
          label="Job ID"
          width="80">
        </el-table-column>
        <el-table-column
          prop="status"
          label="STATUS"
          width="80">
        </el-table-column>
        <el-table-column
          prop="vmid"
          label="SRC ID"
          width="80">
        </el-table-column>
        <el-table-column
          prop="destid"
          label="DEST ID"
          width="80">
        </el-table-column>
        <el-table-column
          prop="time"
          label="Time">
        </el-table-column>
        <el-table-column
          prop="starttime"
          label="Start Time">
        </el-table-column>
        <el-table-column
          prop="finishtime"
          label="Finish Time">
        </el-table-column>
      </el-table>
    </div></el-col>


    <el-col :span="8"><div class="grid-content bg-purple-light"style="margin: 10px">
      <el-alert
        title="支持手动配置平台主机和交换机"
        type="success"
        :closable="false">
      </el-alert>
          <el-form :model="form" style="margin: 0px">
            <el-form-item label="主机数量" :label-width="formLabelWidth" >
              <el-input v-model="form.hostnum" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="边缘交换机端口数" :label-width="formLabelWidth" >
              <el-input v-model="form.edgeports" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="边缘交换机传输带宽" :label-width="formLabelWidth">
              <el-input v-model="form.edgebw" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="核心交换机端口数" :label-width="formLabelWidth">
              <el-input v-model="form.coreports" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item label="核心交换机传输带宽" :label-width="formLabelWidth">
              <el-input v-model="form.corebw" autocomplete="off"></el-input>
            </el-form-item>
            <el-form-item>
              <el-button @click="resetphysical()">清空设置</el-button>
              <el-button @click="addphysical()">确认/继续添加</el-button>
              <el-button class="button" type="success" round @click="finishphysical()">完成设置</el-button>
            </el-form-item>
          </el-form>

          <el-alert style="radius: 20px"
            title="也支持直接上传配置文件"
            type="success"
            :closable="false">
          </el-alert>

          <el-form>
            <el-form-item >
              <div class="buttonstyle">
                <el-upload
                  class="upload-demo"
                  action="http://localhost:8082/uploadphysical"
                  :on-preview="handlePreview"
                  :on-remove="handleRemove"
                  :before-remove="beforeRemove"
                  :on-success="saveName"
                  multiple
                  :limit="3"
                  :on-exceed="handleExceed"
                  :file-list="fileList">
                  <el-button size="small">上传物理拓扑文件</el-button>
                </el-upload>
              </div>
            </el-form-item>
            <el-form-item >
              <div class="buttonstyle">
                <el-upload
                  class="upload-demo"
                  action="http://localhost:8082/uploadvirtual"
                  :on-preview="handlePreview"
                  :on-remove="handleRemove"
                  :before-remove="beforeRemove"
                  :on-success="saveName"
                  multiple
                  :limit="3"
                  :on-exceed="handleExceed"
                  :file-list="fileList">
                  <el-button size="small">上传虚拟拓扑文件</el-button>
                </el-upload>
                <el-upload
                  class="upload-demo"
                  action="http://localhost:8082/uploadworkload"
                  :on-preview="handlePreview"
                  :on-remove="handleRemove"
                  :before-remove="beforeRemove"
                  :on-success="saveName"
                  multiple
                  :limit="3"
                  :on-exceed="handleExceed"
                  :file-list="fileList">
                  <el-button size="small">上传请求负载文件</el-button>
                </el-upload>
              </div>
            </el-form-item>
            <el-form-item >
              <el-switch
                v-model="halfduplex"
                active-color="white"
                inactive-color="lightskyblue"
                active-text="全双工"
                inactive-text="半双工"
                style="margin-right: 20px"
              >
              </el-switch>

              <el-button class="button" type="success" round @click="run">开始仿真</el-button>
            </el-form-item>
          </el-form>
<!--      <br>-->

    </div></el-col>
  </el-row>



</div>
</template>

<script>
import G6 from '@antv/g6';
import axios from 'axios';
import {Message} from "element-ui";
axios.defaults.baseURL = 'http://localhost:8082';
export default {
    data() {
      return {
        halfduplex: true,
        fileList: [],
        filename:"",
        radio:1,
        tableData:[],
        newdata:{},
        dialogFormVisible: false,
        form: {
          hostnum: 0,
          edgeports: 0,
          edgebw: 0,
          coreports: 0,
          corebw: 0,
          datacenters: []
        },
        formLabelWidth: '200px'
      };
    },
    methods: {
      handleRemove(file, fileList) {
        console.log(file, fileList);
      },
      handlePreview(file) {
        console.log(file);
      },
      handleExceed(files, fileList) {
        this.$message.warning(`当前限制选择 3 个文件，本次选择了 ${files.length} 个文件，共选择了 ${files.length + fileList.length} 个文件`);
      },
      beforeRemove(file, fileList) {
        return this.$confirm(`确定移除 ${ file.name }？`);
      },
      saveName(response, file, fileList){
        this.filename=file.name;
      },
      async run(){
        // console.log(this.filename);
        var url= '/run';
        console.log(url);
        await axios.get(url)
          .then(response => {
          this.tableData=response.data.data;
        })
        .catch(error => {
          console.log(error);
        });
      },
      resetphysical(){
        this.form.hostnum = 0;
        this.form.edgeports = 0;
        this.form.coreports = 0;
        this.form.edgebw = 0;
        this.form.corebw = 0;
        this.form.datacenters = [];
      },
      addphysical(){
        this.form.datacenters.push({
          hostnum: this.form.hostnum,
          edgeports: this.form.edgeports,
          coreports: this.form.coreports,
          edgebw: this.form.edgebw,
          corebw: this.form.corebw,
        });
        Message.success({
          message: "添加成功",
          duration: 500
        });
        console.log("add a datacenter!");
      },
      finishphysical(){
        console.log("submit datacenters!");
        axios.post('/writephysical',  this.form.datacenters)
          .then(response => {
            console.log(response.data.message);
          })
          .catch(error => {
            console.log(error);
          });
        Message.success({
          message: "设置成功",
          duration: 1000
        });
        this.form.hostnum = 0;
        this.form.edgeports = 0;
        this.form.coreports = 0;
        this.form.edgebw = 0;
        this.form.corebw = 0;
        this.form.datacenters = [];
      },
      initG6(){
        G6.registerNode(
  'sql',
  {
    drawShape(cfg, group) {
      const rect = group.addShape('rect', {
        attrs: {
          x: -75,
          y: -25,
          width: 150,
          height: 50,
          radius: 10,
          stroke: '#5B8FF9',
          fill: '#C6E5FF',
          lineWidth: 3,
        },
        name: 'rect-shape',
      });
      if (cfg.name) {
        group.addShape('text', {
          attrs: {
            text: cfg.name,
            x: 0,
            y: 0,
            fill: '#00287E',
            fontSize: 14,
            textAlign: 'center',
            textBaseline: 'middle',
            fontWeight: 'bold',
          },
          name: 'text-shape',
        });
      }
      return rect;
    },
  },
  'single-node',
);

const container = document.getElementById('container');
const width = container.scrollWidth;
const height = container.scrollHeight || 500;
const graph = new G6.Graph({
  container: 'container',
  width,
  height :675,
  layout: {
    type: 'dagre',
    nodesepFunc: (d) => {
      if (d.id === '3') {
        return 500;
      }
      return 50;
    },
    ranksep: 70,
    controlPoints: true,
  },
  defaultNode: {
    type: 'sql',
  },
  defaultEdge: {
    type: 'polyline',
    style: {
      radius: 20,
      offset: 45,
      endArrow: true,
      lineWidth: 2,
      stroke: '#C2C8D5',
    },
  },
  nodeStateStyles: {
    selected: {
      stroke: '#d9d9d9',
      fill: '#5394ef',
    },
  },
  modes: {
    default: [
      'drag-canvas',
      'zoom-canvas',
      'click-select',
      {
        type: 'tooltip',
        formatText(model) {
          const cfg = model.conf;
          const text = [];
          cfg.forEach((row) => {
            text.push(row.label + ':' + row.value + '<br>');
          });
          return text.join('\n');
        },
        offset: 5
      },
    ],
  },
  fitView: true,
});
console.log("qing");
console.log(this.newdata);
graph.data(this.newdata);
graph.render();

if (typeof window !== 'undefined')
  window.onresize = () => {
    if (!graph || graph.get('destroyed')) return;
    if (!container || !container.scrollWidth || !container.scrollHeight) return;
    graph.changeSize(container.scrollWidth, container.scrollHeight);
  };
      }
    }
  }
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<!--<style src="../common/css/bodycss.css"></style>-->

<style>
.el-form{
  border: solid 1px #99a9bf;
}
.el-form-item{
  margin-bottom: 0px;
  border: solid 1px #99a9bf;
}
.dialog-footer{
  margin-bottom: 10px;
  margin-top: 0px;
  //border: solid 2px black;
}
.el-button{
  background-color: #99a9bf;
  color:revert;
  margin-top: 5px;
  margin-bottom: 5px;
}
.el-upload{
  display: flex;
  /* 改变item在主轴上的对齐方式 */
  justify-content: center;
}
.el-row {
  margin-bottom: 20px;
  &:last-child {
    margin-bottom: 0;
  }
}
.el-col {
  border-radius: 4px;
}
.bg-purple-dark {
  background: #99a9bf;
}
.bg-purple {
  background: #d3dce6;
}
.bg-purple-light {
  background: #e5e9f2;
}
.grid-content {
  border-radius: 4px;
  //min-height: 10%;
}
.row-bg {
  padding: 10px 0;
  background-color: #f9fafc;
}


.upload-demo {
  margin-top: 5px;
  margin-bottom: 5px;
}
.button{
  margin-top: 10px;
  margin-bottom: 10px;
  background-color: white;
}
#container {
  position: relative;
}

.buttonstyle {
  display: flex;
  /* 改变item在主轴上的对齐方式 */
  justify-content: center;
  margin: 0px;
  //justify-content: space-evenly;
}

.g6-tooltip {
    border-radius: 6px;
    font-size: 10px;
    color: #fff;
    background-color: #000;
    padding: 2px 8px;
    text-align: center;
}
.table {
  margin-left: 135px;
  margin-top: 25px;
}
</style>
